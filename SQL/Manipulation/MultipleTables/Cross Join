CROSS JOIN: 
** The JOIN clause allows for the return of results from more than one table by joining them together with other results based on common column values specified using an ON clause.**

So far, we’ve focused on matching rows that have some information in common.
Sometimes, we just want to combine all rows of one table with all rows of another table.
For instance, if we had a table of shirts and a table of pants, we might want to know all the possible combinations to create different outfits.

Our code might look like this:

SELECT shirts.shirt_color,
   pants.pants_color
FROM shirts
CROSS JOIN pants;

Notice that cross joins don’t require an ON statement. You’re not really joining on any columns!

If we have 3 different shirts (white, grey, and olive) and 2 different pants (light denim and black), the results might look like this:

shirt_color	pants_color
white	light denim
white	black
grey	light denim
grey	black
olive	light denim
olive	black

3 shirts × 2 pants = 6 combinations!

This clothing example is fun, but it’s not very practically useful.

A more common usage of CROSS JOIN is when we need to compare each row of a table to a list of values.

Let’s return to our newspaper subscriptions. This table contains two columns that we haven’t discussed yet:

start_month: the first month where the customer subscribed to the print newspaper (e.g., 2 for February)
end_month: the final month where the customer subscribed to the print newspaper
Suppose we wanted to know how many users were subscribed during each month of the year. For each month (1, 2, 3) we would need to know if a user was subscribed. Follow the steps below to see how we can use a CROSS JOIN to solve this problem.



-- Second query
SELECT * FROM newspaper CROSS JOIN months;
-- What this does is that it selects all of the columns from the newspaper table, and cross joins it into the months table, looking for all possible common values to match to.



-- Third query with added conditions
SELECT * FROM newspaper CROSS JOIN months WHERE start_month <= month AND end_month >= month;



-- fourth query
SELECT month, COUNT(*) -- selects the month column, and all of the rows
FROM newspaper -- grabs from the newspaper table
CROSS JOIN months -- cross joined into the months table
WHERE start_month <= month -- where the start_month is <= month, meaning its a valid start date
AND end_month >= month -- where the end_month >= month, meaning its a valid end date
GROUP BY 1; -- groups the results by each month, so it goes in order from january, february, march... etc.
